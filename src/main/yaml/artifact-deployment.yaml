---
apiVersion: v1
data:
  deploy.js: "//    Copyright 2018 Tremolo Security, Inc.\n// \n//    Licensed under\
    \ the Apache License, Version 2.0 (the \"License\");\n//    you may not use this\
    \ file except in compliance with the License.\n//    You may obtain a copy of\
    \ the License at\n// \n//        http://www.apache.org/licenses/LICENSE-2.0\n\
    // \n//    Unless required by applicable law or agreed to in writing, software\n\
    //    distributed under the License is distributed on an \"AS IS\" BASIS,\n//\
    \    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\
    //    See the License for the specific language governing permissions and\n//\
    \    limitations under the License.\n\nprint(\"Loading CertUtils\");\nvar CertUtils\
    \ = Java.type(\"com.tremolosecurity.kubernetes.artifacts.util.CertUtils\");\n\n\
    print(\"Creating openunison keystore\");\n\nksPassword = inProp['unisonKeystorePassword'];\n\
    ouKs = Java.type(\"java.security.KeyStore\").getInstance(\"PKCS12\");\nouKs.load(null,ksPassword.toCharArray());\n\
    \nuse_k8s_cm = true;\n\nprint(\"Generating client certificate for activemq\");\n\
    amqCertInfo = {\n    \"serverName\":\"amq-client\",\n    \"ou\":\"kubernetes\"\
    ,\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n    \"st\":\"cncf\",\n    \"\
    c\":\"ea\",\n    \"caCert\":false\n}\n\nvar amqClientx509data = CertUtils.createCertificate(amqCertInfo);\n\
    \nCertUtils.saveX509ToKeystore(ouKs,ksPassword,\"amq-client\",amqClientx509data);\n\
    \nprint(\"generate the amq keystore\");\n\namqKS = Java.type(\"java.security.KeyStore\"\
    ).getInstance(\"PKCS12\");\namqKS.load(null,ksPassword.toCharArray());\n\nprint(\"\
    trusting the amq client cert\");\namqKS.setCertificateEntry('trusted-amq-client',ouKs.getCertificate('amq-client'));\n\
    \nprint(\"generating the server side certificate\");\n\namqSrvCertInfo = {\n \
    \ \"serverName\":\"amq.openunison.svc.cluster.local\",\n  \"ou\":\"kubernetes\"\
    ,\n  \"o\":\"tremolo\",\n  \"l\":\"cloud\",\n  \"st\":\"cncf\",\n  \"c\":\"ea\"\
    ,\n  \"caCert\":false\n}\n\nvar amqSrvx509data = CertUtils.createCertificate(amqSrvCertInfo);\n\
    \nif (use_k8s_cm) {\n  print(\"create csr for activemq\");\n\n  amqCsrReq = {\n\
    \    \"apiVersion\": \"certificates.k8s.io/v1beta1\",\n    \"kind\": \"CertificateSigningRequest\"\
    ,\n    \"metadata\": {\n      \"name\": \"amq.openunison.svc.cluster.local\",\n\
    \    },\n    \"spec\": {\n      \"request\": java.util.Base64.getEncoder().encodeToString(CertUtils.generateCSR(amqSrvx509data).getBytes(\"\
    utf-8\")),\n      \"usages\": [\n        \"digital signature\",\n        \"key\
    \ encipherment\",\n        \"server auth\"\n      ]\n    }\n  };\n\n  print(\"\
    Requesting amq certificate\");\n  apiResp = k8s.postWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests',JSON.stringify(amqCsrReq));\n\
    \n  print(\"Approving amq certificate\");\n  approveReq = JSON.parse(apiResp.data);\n\
    \  approveReq.status.conditions = [\n    {\n        \"type\":\"Approved\",\n \
    \       \"reason\":\"OpenUnison Deployment\",\n        \"message\":\"This CSR\
    \ was approved by the OpenUnison artifact deployment job\"\n    }\n  ];\n\n  apiResp\
    \ = k8s.putWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/amq.openunison.svc.cluster.local/approval',JSON.stringify(approveReq));\n\
    \  print(\"Retrieving amq certificate from API server\");\n  apiResp = k8s.callWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/amq.openunison.svc.cluster.local','java.util.Base64.getDecoder().decode(JSON.parse(ws_response_json).status.certificate);check_ws_response=true;',10);\n\
    \  print(apiResp.data);\n  certResp = JSON.parse(apiResp.data);\n  b64cert = certResp.status.certificate;\n\
    \  CertUtils.importSignedCert(amqSrvx509data,b64cert);\n} else {\n  //not using\
    \ CM, so store the amq cert directly into the openunison keystore\n  ouKs.setCertificateEntry('trusted-amq-server',amqSrvx509data.getCertificate());\n\
    }\n\nprint(\"Saving amq certificate to amq keystore\");\nCertUtils.saveX509ToKeystore(amqKS,ksPassword,\"\
    broker\",amqSrvx509data);\n\n\n\n\n\n\n\nprint(\"Generating openunison tls certificate\"\
    );\ncertInfo = {\n    \"serverName\":\"openunison.openunison.svc.cluster.local\"\
    ,\n    \"ou\":\"kubernetes\",\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n\
    \    \"st\":\"cncf\",\n    \"c\":\"ea\",\n    \"caCert\":false\n}\n\nvar x509data\
    \ = CertUtils.createCertificate(certInfo);\n\nif (use_k8s_cm) {\n  print(\"Creating\
    \ CSR for API server\");\n\n\n\n  csrReq = {\n      \"apiVersion\": \"certificates.k8s.io/v1beta1\"\
    ,\n      \"kind\": \"CertificateSigningRequest\",\n      \"metadata\": {\n   \
    \     \"name\": \"openunison.openunison.svc.cluster.local\",\n      },\n     \
    \ \"spec\": {\n        \"request\": java.util.Base64.getEncoder().encodeToString(CertUtils.generateCSR(x509data).getBytes(\"\
    utf-8\")),\n        \"usages\": [\n          \"digital signature\",\n        \
    \  \"key encipherment\",\n          \"server auth\"\n        ]\n      }\n    };\n\
    \n  print(\"Requesting certificate\");\n  apiResp = k8s.postWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests',JSON.stringify(csrReq));\n\
    \n  print(\"Approving certificate\");\n  approveReq = JSON.parse(apiResp.data);\n\
    \  approveReq.status.conditions = [\n      {\n          \"type\":\"Approved\"\
    ,\n          \"reason\":\"OpenUnison Deployment\",\n          \"message\":\"This\
    \ CSR was approved by the OpenUnison artifact deployment job\"\n      }\n  ];\n\
    \n  apiResp = k8s.putWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/openunison.openunison.svc.cluster.local/approval',JSON.stringify(approveReq));\n\
    \  print(\"Retrieving certificate from API server\");\n  apiResp = k8s.callWS('/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/openunison.openunison.svc.cluster.local','java.util.Base64.getDecoder().decode(JSON.parse(ws_response_json).status.certificate);check_ws_response=true;',10);\n\
    \  print(apiResp.data);\n  certResp = JSON.parse(apiResp.data);\n  b64cert = certResp.status.certificate;\n\
    \  CertUtils.importSignedCert(x509data,b64cert);\n}\n\nprint(\"Saving certificate\
    \ to keystore\");\nCertUtils.saveX509ToKeystore(ouKs,ksPassword,\"unison-tls\"\
    ,x509data);\nCertUtils.createKey(ouKs,\"session-unison\",ksPassword);\nCertUtils.createKey(ouKs,\"\
    lastmile-oidc\",ksPassword);\n\nprint(\"Generating OIDC Certificate\");\n\ncertInfo\
    \ = {\n    \"serverName\":\"unison-saml2-rp-sig\",\n    \"ou\":\"kubernetes\"\
    ,\n    \"o\":\"tremolo\",\n    \"l\":\"cloud\",\n    \"st\":\"cncf\",\n    \"\
    c\":\"ea\",\n    \"caCert\":false\n}\n\nx509data = CertUtils.createCertificate(certInfo);\n\
    CertUtils.saveX509ToKeystore(ouKs,ksPassword,\"unison-saml2-rp-sig\",x509data);\n\
    \nrp_sig_cert_bytes = x509data.getCertificate();\n\nprint(\"Storing k8s certs\"\
    );\nouKs.setCertificateEntry('k8s-master',k8s.getCertificate('k8s-master'));\n\
    \n\n//import metadata\n\nfXmlFile = new java.io.File(\"/etc/extracerts/saml2-metadata.xml\"\
    );\ndbFactory = javax.xml.parsers.DocumentBuilderFactory.newInstance();\ndBuilder\
    \ = dbFactory.newDocumentBuilder();\ndoc = dBuilder.parse(fXmlFile);\n\n//get\
    \ entity id\nentityId = doc.getElementsByTagName(\"EntityDescriptor\").item(0).getAttribute(\"\
    entityID\");\n\nidp = doc.getElementsByTagName(\"IDPSSODescriptor\").item(0);\n\
    \nsingleLogoutURL = \"\";\nssoGetURL = \"\";\nssoPostURL = \"\";\nsig_certs =\
    \ [];\nsig_cert_to_use = \"\"\n\ncurrent_cert_choice = null;\n\n\n//single logout\n\
    slos = idp.getElementsByTagName(\"SingleLogoutService\");\n\nfor (i = 0;i<slos.getLength();i++)\
    \ {\n    slo = slos.item(i);\n    if (slo.getAttribute(\"Binding\").equalsIgnoreCase(\"\
    urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\")) {\n        singleLogoutURL\
    \ = slo.getAttribute(\"Location\");\n    }\n}\n\n//single sign on\nssos = idp.getElementsByTagName(\"\
    SingleSignOnService\");\n\nfor (i = 0;i<ssos.getLength();i++) {\n    sso = ssos.item(i);\n\
    \    if (sso.getAttribute(\"Binding\").equalsIgnoreCase(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\
    )) {\n        ssoGetURL = sso.getAttribute(\"Location\");\n    } else if (sso.getAttribute(\"\
    Binding\").equalsIgnoreCase(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\
    )) {\n        ssoPostURL = sso.getAttribute(\"Location\");\n    }\n}\n\nkeys =\
    \ idp.getElementsByTagName(\"KeyDescriptor\");\n\nfor (i=0;i<keys.getLength();i++)\
    \ {\n    key = keys.item(i);\n\n    if (key.getAttribute(\"use\").equalsIgnoreCase(\"\
    signing\")) {\n        sig_cert = key.getElementsByTagName(\"KeyInfo\").item(0).getElementsByTagName(\"\
    X509Data\").item(0).getElementsByTagName(\"X509Certificate\").item(0).getTextContent();\n\
    \        sig_certs.push(sig_cert);\n    }\n}\n\nif (sig_certs.length == 1) {\n\
    \    current_cert_choice = com.tremolosecurity.kubernetes.artifacts.util.CertUtils.string2cert(sig_certs[0]);\n\
    } else {\n    for (i=0;i<sig_certs.length;i++) {\n        current_cert = com.tremolosecurity.kubernetes.artifacts.util.CertUtils.string2cert(sig_certs[i]);\n\
    \        if (current_cert_choice == null) {\n            current_cert_choice =\
    \ current_cert;\n        } else {\n            if (current_cert_choice.getNotAfter().compareTo(current_cert.getNotAfter())\
    \  < 0  ) {\n                current_cert_choice = current_cert;\n           \
    \ }\n        }\n    }\n    \n}\n\n\ninProp['IDP_ENTITY_ID'] = entityId;\ninProp['IDP_POST']\
    \ = ssoPostURL;\ninProp['IDP_REDIR'] = ssoGetURL;\ninProp['IDP_LOGOUT'] = singleLogoutURL;\n\
    \n\nouKs.setCertificateEntry('idp-saml2-sig',current_cert_choice);\n\n\nprint(\"\
    Create the openunison namespace\");\n\nouNS = {\n    \"apiVersion\":\"v1\",\n\
    \    \"kind\":\"Namespace\",\n    \"metadata\":{\n        \"creationTimestamp\"\
    :null,\n        \"name\":\"openunison\"\n    },\n    \"spec\":{},\n    \"status\"\
    :{}\n};\n\nk8s.postWS('/api/v1/namespaces',JSON.stringify(ouNS));\n\nif (inProp['REG_CRED_USER']\
    \ != null) {\n  username = inProp['REG_CRED_USER'];\n  password = inProp['REG_CRED_PASSWORD'];\n\
    \  b64Creds = java.util.Base64.getEncoder().encodeToString((username + ':' + password).getBytes(\"\
    UTF-8\"));\n  //TODO determine this from the builder image\n  credServer = inProp['BUILDER_IMAGE'].substring(0,inProp['BUILDER_IMAGE'].indexOf('/'));\n\
    \  print(\"Registry Server - '\" + credServer + \"'\");\n\n\n  docker_creds =\
    \ {};\n  docker_creds[\"auths\"] = {};\n  docker_creds[\"auths\"][credServer]\
    \ = {\n    \"username\": username,\n    \"password\": password,\n    \"email\"\
    : \"doesnotmatter@doesnotmatter.com\",\n    \"auth\": b64Creds\n  };\n\n  \n \
    \ docker_secret = {\n    \"apiVersion\": \"v1\",\n    \"data\": {\n      \".dockerconfigjson\"\
    : java.util.Base64.getEncoder().encodeToString(JSON.stringify(docker_creds).getBytes(\"\
    UTF-8\"))\n    },\n    \"kind\": \"Secret\",\n    \"metadata\": {\n      \"name\"\
    : \"redhat-registry\",\n      \"namespace\":\"openunison\"\n    },\n    \"type\"\
    : \"kubernetes.io/dockerconfigjson\"\n  }\n\n  res = k8s.postWS(\"/api/v1/namespaces/openunison/secrets\"\
    ,JSON.stringify(docker_secret));\n  print(res.data);\n\n}\n\n\nprint(\"import\
    \ builder image\");\n\n\nimport_builder_image = {\n  \"kind\": \"ImageStreamImport\"\
    ,\n  \"apiVersion\": \"image.openshift.io/v1\",\n  \"metadata\": {\n    \"name\"\
    : \"openunison-s2i\",\n    \"namespace\": \"openunison\",\n    \"creationTimestamp\"\
    : null\n  },\n  \"spec\": {\n    \"import\": true,\n    \"images\": [\n      {\n\
    \        \"from\": {\n          \"kind\": \"DockerImage\",\n          \"name\"\
    : inProp['BUILDER_IMAGE']\n        },\n        \"to\": {\n          \"name\":\
    \ \"latest\"\n        },\n        \"importPolicy\": {},\n        \"referencePolicy\"\
    : {\n          \"type\": \"\"\n        }\n      }\n    ]\n  },\n  \"status\":\
    \ {}\n};\n\nres = k8s.postWS(\"/apis/image.openshift.io/v1/namespaces/openunison/imagestreamimports\"\
    ,JSON.stringify(import_builder_image));\nprint(res.data);\n\n\nprint(\"Create\
    \ openunison service account\");\n\nk8s.postWS('/api/v1/namespaces/openunison/serviceaccounts',JSON.stringify({\"\
    apiVersion\":\"v1\",\"kind\":\"ServiceAccount\",\"metadata\":{\"creationTimestamp\"\
    :null,\"name\":\"openunison\"}}));\n\n\nprint(\"Creating RBAC Bindings\");\n\n\
    rbac = {\n    \"kind\": \"ClusterRoleBinding\",\n    \"apiVersion\": \"rbac.authorization.k8s.io/v1\"\
    ,\n    \"metadata\": {\n      \"name\": \"openunison-cluster-administrators\"\n\
    \    },\n    \"subjects\": [\n      {\n        \"kind\": \"Group\",\n        \"\
    name\": \"k8s-cluster-administrators\",\n        \"apiGroup\": \"rbac.authorization.k8s.io\"\
    \n      },\n      {\n        \"kind\": \"ServiceAccount\",\n        \"name\":\
    \ \"openunison\",\n        \"namespace\": \"openunison\"\n      }\n    ],\n  \
    \  \"roleRef\": {\n      \"kind\": \"ClusterRole\",\n      \"name\": \"cluster-admin\"\
    ,\n      \"apiGroup\": \"rbac.authorization.k8s.io\"\n    }\n  };\n\nk8s.postWS(\"\
    /apis/rbac.authorization.k8s.io/v1/clusterrolebindings\",JSON.stringify(rbac));\n\
    \nrbac = {\n    \"kind\": \"ClusterRole\",\n    \"apiVersion\": \"rbac.authorization.k8s.io/v1\"\
    ,\n    \"metadata\": {\n      \"name\": \"list-namespaces\"\n    },\n    \"rules\"\
    : [\n      {\n        \"apiGroups\": [\n          \"\"\n        ],\n        \"\
    resources\": [\n          \"namespaces\"\n        ],\n        \"verbs\": [\n \
    \         \"list\"\n        ]\n      }\n    ]\n  };\n\nk8s.postWS(\"/apis/rbac.authorization.k8s.io/v1/clusterroles\"\
    ,JSON.stringify(rbac));\n\nrbac = {\n    \"kind\": \"ClusterRoleBinding\",\n \
    \   \"apiVersion\": \"rbac.authorization.k8s.io/v1\",\n    \"metadata\": {\n \
    \     \"name\": \"openunison-cluster-list-namespaces\"\n    },\n    \"subjects\"\
    : [\n      {\n        \"kind\": \"Group\",\n        \"name\": \"users\",\n   \
    \     \"apiGroup\": \"rbac.authorization.k8s.io\"\n      }\n    ],\n    \"roleRef\"\
    : {\n      \"kind\": \"ClusterRole\",\n      \"name\": \"list-namespaces\",\n\
    \      \"apiGroup\": \"rbac.authorization.k8s.io\"\n    }\n  };\n\n\nk8s.postWS(\"\
    /apis/rbac.authorization.k8s.io/v1/clusterrolebindings\",JSON.stringify(rbac));\n\
    \n\n//load quartz sql\nprint(\"pulling quartz sql\");\nquartzSQL = com.tremolosecurity.kubernetes.artifacts.util.NetUtil.downloadFile(\"\
    file:///etc/input-maps/quartz.sql\");\nprint(\"parsing quartz sql\");\nparsedSQL\
    \ = com.tremolosecurity.kubernetes.artifacts.util.DbUtils.parseSQL(quartzSQL);\n\
    print(\"runnins quartz sql\");\ncom.tremolosecurity.kubernetes.artifacts.util.DbUtils.runSQL(parsedSQL,inProp[\"\
    OU_JDBC_DRIVER\"],inProp[\"OU_JDBC_URL\"],inProp[\"OU_JDBC_USER\"],inProp[\"OU_JDBC_PASSWORD\"\
    ]);\n\n//create the ip mask\nmyIp = com.tremolosecurity.kubernetes.artifacts.util.NetUtil.whatsMyIP();\n\
    mask = myIp.substring(0,myIp.indexOf(\".\"));\ninProp[\"OU_QUARTZ_MASK\"] = mask;\n\
    \nprint(\"Create activemq config secret\");\namqFileSecrets = {\n  \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"Opaque\",\n    \"metadata\"\
    : {\n        \"name\":\"amq-secrets\",\n        \"namespace\":\"openunison\"\n\
    \    },\n    \"data\":{\n      \"activemq.xml\":\"\"\
    ,\n      \"amq.p12\":CertUtils.encodeKeyStore(amqKS,ksPassword)\n    }\n}\n\n\
    k8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(amqFileSecrets));\n\
    \nprint(\"Create activemq env var secret\");\n\namqEnvSecrets = {\n  \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"Opaque\",\n    \"metadata\"\
    : {\n        \"name\":\"amq-env-secrets\",\n        \"namespace\":\"openunison\"\
    \n    },\n    \"data\":{\n      \"JDBC_DRIVER\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_DRIVER'].getBytes(\"\
    UTF-8\")),\n      \"JDBC_URL\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_URL'].getBytes(\"\
    UTF-8\")),\n      \"JDBC_USER\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_USER'].getBytes(\"\
    UTF-8\")),\n      \"JDBC_PASSWORD\":java.util.Base64.getEncoder().encodeToString(inProp['OU_JDBC_PASSWORD'].getBytes(\"\
    UTF-8\")),\n      \"TLS_KS_PWD\":java.util.Base64.getEncoder().encodeToString(ksPassword.getBytes(\"\
    UTF-8\"))\n    }\n}\n\nk8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(amqEnvSecrets));\n\
    \nprint(\"Create OpenUnison Secret\");\n\n\nouSecrets = {\n    \"apiVersion\"\
    :\"v1\",\n    \"kind\":\"Secret\",\n    \"type\":\"Opaque\",\n    \"metadata\"\
    : {\n        \"name\":\"openunison-secrets\",\n        \"namespace\":\"openunison\"\
    \n    },\n    \"data\":{\n      \"openunison.yaml\":\"LS0tCm9wZW5fcG9ydDogODA4MApvcGVuX2V4dGVybmFsX3BvcnQ6IDgwCnNlY3VyZV9wb3J0OiA4NDQzCnNlY3VyZV9leHRlcm5hbF9wb3J0OiA0NDMKc2VjdXJlX2tleV9hbGlhczogInVuaXNvbi10bHMiCmZvcmNlX3RvX3NlY3VyZTogdHJ1ZQphY3RpdmVtcV9kaXI6ICIvdG1wL2FtcSIKcXVhcnR6X2RpcjogIi90bXAvcXVhcnR6IgpjbGllbnRfYXV0aDogbm9uZQphbGxvd2VkX2NsaWVudF9uYW1lczogW10KY2lwaGVyczoKLSBUTFNfUlNBX1dJVEhfUkM0XzEyOF9TSEEKLSBUTFNfUlNBX1dJVEhfQUVTXzEyOF9DQkNfU0hBCi0gVExTX1JTQV9XSVRIX0FFU18yNTZfQ0JDX1NIQQotIFRMU19SU0FfV0lUSF8zREVTX0VERV9DQkNfU0hBCi0gVExTX1JTQV9XSVRIX0FFU18xMjhfQ0JDX1NIQTI1NgotIFRMU19SU0FfV0lUSF9BRVNfMjU2X0NCQ19TSEEyNTYKcGF0aF90b19kZXBsb3ltZW50OiAiL3Vzci9sb2NhbC9vcGVudW5pc29uL3dvcmsiCnBhdGhfdG9fZW52X2ZpbGU6ICIvZXRjL29wZW51bmlzb24vb3UuZW52IgoK\"\
    ,\n      \"ou.env\":k8s.encodeMap(inProp),\n      \"unisonKeyStore.p12\":CertUtils.encodeKeyStore(ouKs,ksPassword)\n\
    \    }\n}\n\nk8s.postWS('/api/v1/namespaces/openunison/secrets',JSON.stringify(ouSecrets));\n\
    \nprint(\"Creating post deployment configmap\");\n\nprint(\"Runing kubectl create\"\
    );\nk8s.kubectlCreate(k8s.processTemplate(deploymentTemplate,inProp));\nprint(\"\
    kubectl complete\");\n\n\n\nou_route = {\n\t\"kind\": \"Route\",\n\t\"apiVersion\"\
    : \"route.openshift.io/v1\",\n\t\"id\": \"openunison-https\",\n\t\"metadata\"\
    : {\n\t\t\"name\": \"secure-openunison\",\n\t\t\"labels\": {\n\t\t\t\"application\"\
    : \"openunison\"\n\t\t},\n\t\t\"annotations\": {\n\t\t\t\"description\": \"Route\
    \ for OpenUnison's https service.\"\n\t\t}\n\t},\n\t\"spec\": {\n\t\t\"host\"\
    : inProp['OU_HOST'],\n\t\t\"port\": {\n\t\t\t\"targetPort\": \"secure\"\n\t\t\
    },\n\t\t\"to\": {\n\t\t\t\"kind\": \"Service\",\n\t\t\t\"name\": \"secure-openunison\"\
    \n\t\t},\n\t\t\"tls\": {\n\t\t\t\"termination\": \"reencrypt\",\n      \"destinationCACertificate\"\
    :CertUtils.exportCert(k8s.getCertificate('k8s-master'))\n\t\t}\n\t}\n};\n\nk8s.postWS('/apis/route.openshift.io/v1/namespaces/openunison/routes',JSON.stringify(ou_route));\n\
    \nou_imagestream = {\n\t\"kind\": \"ImageStream\",\n\t\"apiVersion\": \"image.openshift.io/v1\"\
    ,\n\t\"metadata\": {\n\t\t\"name\": \"openunison\",\n\t\t\"labels\": {\n\t\t\t\
    \"application\": \"openunison\"\n\t\t}\n\t}\n};\n\nk8s.postWS('/apis/image.openshift.io/v1/namespaces/openunison/imagestreams',JSON.stringify(ou_imagestream));\n\
    \nou_build = {\n\t\"kind\": \"BuildConfig\",\n\t\"apiVersion\": \"build.openshift.io/v1\"\
    ,\n\t\"metadata\": {\n\t\t\"name\": \"openunison\",\n\t\t\"labels\": {\n\t\t\t\
    \"application\": \"openunison\"\n\t\t}\n\t},\n\t\"spec\": {\n\t\t\"source\": {\n\
    \t\t\t\"type\": \"Git\",\n\t\t\t\"git\": {\n\t\t\t\t\"uri\": \"https://github.com/OpenUnison/openunison-openshift-saml2.git\"\
    ,\n\t\t\t\t\"ref\": \"master\"\n\t\t\t},\n\t\t\t\"contextDir\": \"/\"\n\t\t},\n\
    \t\t\"strategy\": {\n\t\t\t\"type\": \"Source\",\n\t\t\t\"sourceStrategy\": {\n\
    \t\t\t\t\"env\": [],\n\t\t\t\t\"forcePull\": true,\n\t\t\t\t\"from\": {\n\t\t\t\
    \t\t\"kind\": \"ImageStreamTag\",\n\t\t\t\t\t\"namespace\": \"openunison\",\n\t\
    \t\t\t\t\"name\": \"openunison-s2i:latest\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"\
    output\": {\n\t\t\t\"to\": {\n\t\t\t\t\"kind\": \"ImageStreamTag\",\n\t\t\t\t\"\
    name\": \"openunison:latest\"\n\t\t\t}\n\t\t},\n\t\t\"triggers\": [\n\t\t\t{\n\
    \t\t\t\t\"type\": \"ImageChange\",\n\t\t\t\t\"imageChange\": {}\n\t\t\t},\n\t\t\
    \t{\n\t\t\t\t\"type\": \"ConfigChange\"\n\t\t\t}\n\t\t]\n\t}\n};\n\nif (inProp['REG_CRED_USER']\
    \ != null) {\n  ou_build.spec.strategy.sourceStrategy['pullSecret'] = {\"name\"\
    :\"redhat-registry\"};\n}\n\nk8s.postWS('/apis/build.openshift.io/v1/namespaces/openunison/buildconfigs',JSON.stringify(ou_build));\n\
    \nou_deployment = {\n\t\"kind\": \"DeploymentConfig\",\n\t\"apiVersion\": \"apps.openshift.io/v1\"\
    ,\n\t\"metadata\": {\n\t\t\"name\": \"openunison\",\n\t\t\"labels\": {\n\t\t\t\
    \"application\": \"openunison\"\n\t\t}\n\t},\n\t\"spec\": {\n\t\t\"strategy\"\
    : {\n\t\t\t\"type\": \"Recreate\"\n\t\t},\n\t\t\"triggers\": [\n\t\t\t{\n\t\t\t\
    \t\"type\": \"ImageChange\",\n\t\t\t\t\"imageChangeParams\": {\n\t\t\t\t\t\"automatic\"\
    : true,\n\t\t\t\t\t\"containerNames\": [\n\t\t\t\t\t\t\"openunison\"\n\t\t\t\t\
    \t],\n\t\t\t\t\t\"from\": {\n\t\t\t\t\t\t\"kind\": \"ImageStreamTag\",\n\t\t\t\
    \t\t\t\"name\": \"openunison:latest\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\
    {\n\t\t\t\t\"type\": \"ConfigChange\"\n\t\t\t}\n\t\t],\n\t\t\"replicas\": 1,\n\
    \t\t\"selector\": {\n\t\t\t\"deploymentConfig\": \"openunison\"\n\t\t},\n\t\t\"\
    template\": {\n\t\t\t\"metadata\": {\n\t\t\t\t\"name\": \"openunison\",\n\t\t\t\
    \t\"labels\": {\n\t\t\t\t\t\"deploymentConfig\": \"openunison\",\n\t\t\t\t\t\"\
    application\": \"openunison\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"spec\": {\n\t\t\t\t\
    \"terminationGracePeriodSeconds\": 60,\n\t\t\t\t\"containers\": [\n\t\t\t\t\t\
    {\n\t\t\t\t\t\t\"name\": \"openunison\",\n\t\t\t\t\t\t\"image\": \"openunison\"\
    ,\n\t\t\t\t\t\t\"imagePullPolicy\": \"Always\",\n\t\t\t\t\t\t\"volumeMounts\"\
    : [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"secret-volume\",\n\t\t\t\t\t\
    \t\t\t\"mountPath\": \"/etc/openunison\",\n\t\t\t\t\t\t\t\t\"readOnly\": true\n\
    \t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"livenessProbe\": {\n\t\t\t\t\t\t\
    \t\"exec\": {\n\t\t\t\t\t\t\t\t\"command\": [\n\t\t\t\t\t\t\t\t\t\"/usr/local/openunison/bin/check_alive.py\"\
    \n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"initialDelaySeconds\":\
    \ 30,\n\t\t\t\t\t\t\t\"timeoutSeconds\": 10,\n              \"failureThreshold\"\
    :10\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"readinessProbe\": {\n\t\t\t\t\t\t\t\"exec\"\
    : {\n\t\t\t\t\t\t\t\t\"command\": [\n\t\t\t\t\t\t\t\t\t\"/usr/local/openunison/bin/check_alive.py\"\
    \n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"initialDelaySeconds\":\
    \ 30,\n\t\t\t\t\t\t\t\"timeoutSeconds\": 10,\n              \"failureThreshold\"\
    :10\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"ports\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\
    \t\"name\": \"http\",\n\t\t\t\t\t\t\t\t\"containerPort\": 8080,\n\t\t\t\t\t\t\t\
    \t\"protocol\": \"TCP\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"\
    name\": \"https\",\n\t\t\t\t\t\t\t\t\"containerPort\": 8443,\n\t\t\t\t\t\t\t\t\
    \"protocol\": \"TCP\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"env\": [\n\
    \t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"name\": \"JAVA_OPTS\",\n\t\t\t\t\t\t\t\t\"\
    value\": \"-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\\\
    n-DunisonEnvironmentFile=/etc/openunison/ou.env\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\
    \t]\n\t\t\t\t\t}\n        ],\n        \"serviceAccount\":\"openunison\",\n   \
    \     \"serviceAccountName\":\"openunison\",\n\t\t\t\t\"volumes\": [\n\t\t\t\t\
    \t{\n\t\t\t\t\t\t\"name\": \"secret-volume\",\n\t\t\t\t\t\t\"secret\": {\n\t\t\
    \t\t\t\t\t\"secretName\": \"openunison-secrets\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\
    \t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n};\n\nk8s.postWS('/apis/apps.openshift.io/v1/namespaces/openunison/deploymentconfigs',JSON.stringify(ou_deployment));\n\
    \n\n\nxmlMetaData =  '<EntityDescriptor ID=\"_10685acd-7df4-427e-b61e-68e4f6407c24\"\
    \ entityID=\"https://' + inProp['OU_HOST'] + '/auth/SAML2Auth\" xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\"\
    >\\n';\nxmlMetaData += '  <SPSSODescriptor WantAssertionsSigned=\"true\" protocolSupportEnumeration=\"\
    urn:oasis:names:tc:SAML:2.0:protocol\">\\n';\nxmlMetaData += '      <KeyDescriptor\
    \ use=\"signing\">\\n';\nxmlMetaData += '        <KeyInfo xmlns=\"http://www.w3.org/2000/09/xmldsig#\"\
    >\\n';\nxmlMetaData += '              <X509Data>\\n';\nxmlMetaData += '      \
    \            <X509Certificate>\\n' + new org.apache.commons.codec.binary.Base64(64).encodeToString(rp_sig_cert_bytes.getEncoded())\
    \ + '</X509Certificate>\\n';\nxmlMetaData += '              </X509Data>\\n';\n\
    xmlMetaData += '          </KeyInfo>\\n';\nxmlMetaData += '      </KeyDescriptor>\\\
    n';\nxmlMetaData += '      <SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\
    \ Location=\"https://' + inProp['OU_HOST'] + '/auth/SAML2Auth\"/>\\n';\nxmlMetaData\
    \ += '      <NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</NameIDFormat>\\\
    n';\nxmlMetaData += '      <AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\
    \ Location=\"https://' + inProp['OU_HOST'] + '/auth/SAML2Auth\" index=\"0\" isDefault=\"\
    true\"/>\\n';\nxmlMetaData += '      <AssertionConsumerService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\
    \ Location=\"https://' + inProp['OU_HOST'] + '/auth/SAML2Auth\" index=\"1\"/>\\\
    n';\nxmlMetaData += '  </SPSSODescriptor>\\n';\nxmlMetaData += '</EntityDescriptor>';\n\
    \n\npost_deploy_instructions = \"After the build is complete:\\n\" +\n       \
    \                    \" 1.  In the same directory as your ansible inventory file,\
    \ create a file called group_vars/OSEv3.yaml\\n\" +\n                        \
    \   \" 2.  Add the following YAML to this file:\\n\" +\n                     \
    \      \"openshift_master_identity_providers:\\n\" +\n                       \
    \    \"- name: openunison\\n\" +\n                           \"  challenge: false\\\
    n\" +\n                           \"  login: true\\n\" +\n                   \
    \        \"  mappingMethod: claim\\n\" +\n                           \"  kind:\
    \ OpenIDIdentityProvider\\n\" +\n                           \"  clientID: openshift\\\
    n\" +\n                           \"  clientSecret: YOUR_SECRET\\n\" +\n     \
    \                      \"  ca: /etc/origin/master/openunison_openid_ca.crt\\n\"\
    \ +\n                           \"  claims:\\n\" +\n                         \
    \  \"    id:\\n\" +\n                           \"    - sub\\n\" +\n         \
    \                  \"    preferredUsername:\\n\" +\n                         \
    \  \"    - preferred_username\\n\" + \n                           \"    name:\\\
    n\" +\n                           \"    - name\\n\" +\n                      \
    \     \"    email:\\n\" +\n                           \"    - email\\n\" +\n \
    \                          \"  urls:\\n\" +\n                           \"   \
    \ authorize: https://\" + inProp[\"OU_HOST\"] + \"/auth/idp/OpenShiftIdP/auth\\\
    n\" +\n                           \"    token: https://\" + inProp[\"OU_HOST\"\
    ] + \"/auth/idp/OpenShiftIdP/token\\n\" +\n                           \"3.  In\
    \ your inventory, set openshift_master_logout_url=https://\" + inProp['OU_HOST']\
    \ + \"/logout\\n\" +\n                           \"4.  Step 3 will NOT update\
    \ the ConfigMap that controls this setting, so follow the instructions at https://docs.openshift.com/container-platform/3.11/install_config/web_console_customization.html#changing-the-logout-url\\\
    n\" +\n                           \"5.  If you're router is using the default\
    \ wildcard certificate generated by OpenShift, copy /etc/origin/master/ca.crt\
    \ to /etc/origin/master/openunison_openid_ca.crt.  If using a 3rd party CA issued\
    \ certificate, make sure to copy it to /etc/origin/master/openunison_openid_ca.crt\
    \ on each master. \\n\" +\n                           \"6.  Run the openshift-ansible/playbooks/openshift-master/config.yml\
    \ playbook\\n\" + \n                           \"7.  Import the metadata generated\
    \ in saml2-rp-metadata\" \n                           \n\n\n\ncfgMap = {\n   \
    \ \"apiVersion\":\"v1\",\n    \"kind\":\"ConfigMap\",\n    \"metadata\":{\n  \
    \      \"name\":\"api-server-config\",\n        \"namespace\":\"openunison\"\n\
    \    },\n    \"data\":{\n        \"post-deploy-instructions\":post_deploy_instructions,\n\
    \        \"openshift_idp_configuration\":\"\",\n        \"saml2-rp-metadata\"\
    :xmlMetaData\n        \n        //\"deployment\":java.util.Base64.getEncoder().encodeToString(k8s.processTemplate(deploymentTemplate,inProp).getBytes(\"\
    UTF-8\"))\n    }\n};\n\nk8s.postWS('/api/v1/namespaces/openunison/configmaps',JSON.stringify(cfgMap));\n\
    \nprint(\"Deleting cluster role binding\");\nk8s.deleteWS('/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/artifact-deployment');\n\
    \nprint(\"Artifacts Created, to configure the API server run 'kubectl describe\
    \ configmap api-server-config -n openunison'\");"
  openunison.yaml: "# ActiveMQ\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n\
    \    app: amq\n  name: amq\n  namespace: openunison\nspec:\n  ports:\n  - name:\
    \ amq-openwire\n    port: 61616\n    protocol: TCP\n    targetPort: 61616\n  -\
    \ name: amq-admin\n    port: 8162\n    protocol: TCP\n    targetPort: 8162\n \
    \ selector:\n    app: amq\n  sessionAffinity: ClientIP\n  sessionAffinityConfig:\n\
    \    clientIP:\n      timeoutSeconds: 10800\n  type: ClusterIP\nstatus:\n  loadBalancer:\
    \ {}\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n\
    \    app: amq\n  name: amq\n  namespace: openunison\nspec:\n  progressDeadlineSeconds:\
    \ 600\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n\
    \      app: amq\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable:\
    \ 25%\n    type: RollingUpdate\n  template:\n    metadata:\n      creationTimestamp:\
    \ null\n      labels:\n        app: amq\n    spec:\n      containers:\n      -\
    \ env:\n        - name: JAVA_OPTS\n          value: -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\n\
    \        - name: JDBC_DRIVER\n          valueFrom:\n            secretKeyRef:\n\
    \              name: amq-env-secrets\n              key: JDBC_DRIVER\n       \
    \ - name: JDBC_URL\n          valueFrom:\n            secretKeyRef:\n        \
    \      name: amq-env-secrets\n              key: JDBC_URL\n        - name: JDBC_USER\n\
    \          valueFrom:\n            secretKeyRef:\n              name: amq-env-secrets\n\
    \              key: JDBC_USER\n        - name: JDBC_PASSWORD\n          valueFrom:\n\
    \            secretKeyRef:\n              name: amq-env-secrets\n            \
    \  key: JDBC_PASSWORD\n        - name: TLS_KS_PWD\n          valueFrom:\n    \
    \        secretKeyRef:\n              name: amq-env-secrets\n              key:\
    \ TLS_KS_PWD\n        image: docker.io/tremolosecurity/activemq-docker\n     \
    \   imagePullPolicy: Always\n        livenessProbe:\n          tcpSocket:\n  \
    \          port: 61616\n          failureThreshold: 10\n          initialDelaySeconds:\
    \ 10\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds:\
    \ 10\n        name: openunison\n        ports:\n        - containerPort: 8080\n\
    \          name: http\n          protocol: TCP\n        - containerPort: 8443\n\
    \          name: https\n          protocol: TCP\n        readinessProbe:\n   \
    \       tcpSocket:\n            port: 61616\n          failureThreshold: 3\n \
    \         initialDelaySeconds: 10\n          periodSeconds: 10\n          successThreshold:\
    \ 1\n          timeoutSeconds: 10\n        resources: {}\n        terminationMessagePath:\
    \ /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n\
    \        - mountPath: /etc/activemq\n          name: secret-volume\n         \
    \ readOnly: true\n        - mountPath: /usr/local/activemq/data\n          name:\
    \ local-data\n        - mountPath: /usr/local/activemq/tmp\n          name: jetty-tmp\n\
    \      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      terminationGracePeriodSeconds:\
    \ 30\n      volumes:\n      - name: secret-volume\n        secret:\n         \
    \ defaultMode: 420\n          secretName: amq-secrets\n      - name: local-data\n\
    \        emptyDir: {}\n      - name: jetty-tmp\n        emptyDir: {}\n---\nkind:\
    \ Service\napiVersion: v1\nspec:\n  ports:\n  - port: 443\n    targetPort: 8443\n\
    \    name: secure\n  selector:\n    deploymentConfig: \"openunison\"\nmetadata:\n\
    \  name: secure-openunison\n  namespace: openunison\n  labels:\n    application:\
    \ \"openunison\"\n  annotations:\n    description: OpenUnison's https port for\
    \ #[OU_HOST]"
  quartz.sql: "# By: Ron Cordell - roncordell\n#  I didn't see this anywhere, so I\
    \ thought I'd post it here. This is the script from Quartz to create the tables\
    \ in a MySQL database, modified to use INNODB instead of MYISAM.\n\n\n# make sure\
    \ you have UTF-8 collaction for best .NET interoperability\n# CREATE DATABASE\
    \ quartznet CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\nDROP TABLE IF\
    \ EXISTS QRTZ_FIRED_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;\n\
    DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;\nDROP TABLE IF EXISTS QRTZ_LOCKS;\n\
    DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;\n\
    DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;\n\
    DROP TABLE IF EXISTS QRTZ_TRIGGERS;\nDROP TABLE IF EXISTS QRTZ_JOB_DETAILS;\n\
    DROP TABLE IF EXISTS QRTZ_CALENDARS;\n\nCREATE TABLE QRTZ_JOB_DETAILS(\nSCHED_NAME\
    \ VARCHAR(120) NOT NULL,\nJOB_NAME VARCHAR(200) NOT NULL,\nJOB_GROUP VARCHAR(200)\
    \ NOT NULL,\nDESCRIPTION VARCHAR(250) NULL,\nJOB_CLASS_NAME VARCHAR(250) NOT NULL,\n\
    IS_DURABLE BOOLEAN NOT NULL,\nIS_NONCONCURRENT BOOLEAN NOT NULL,\nIS_UPDATE_DATA\
    \ BOOLEAN NOT NULL,\nREQUESTS_RECOVERY BOOLEAN NOT NULL,\nJOB_DATA BLOB NULL,\n\
    PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))\nENGINE=InnoDB;\n\nCREATE TABLE QRTZ_TRIGGERS\
    \ (\nSCHED_NAME VARCHAR(120) NOT NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\n\
    TRIGGER_GROUP VARCHAR(200) NOT NULL,\nJOB_NAME VARCHAR(200) NOT NULL,\nJOB_GROUP\
    \ VARCHAR(200) NOT NULL,\nDESCRIPTION VARCHAR(250) NULL,\nNEXT_FIRE_TIME BIGINT(19)\
    \ NULL,\nPREV_FIRE_TIME BIGINT(19) NULL,\nPRIORITY INTEGER NULL,\nTRIGGER_STATE\
    \ VARCHAR(16) NOT NULL,\nTRIGGER_TYPE VARCHAR(8) NOT NULL,\nSTART_TIME BIGINT(19)\
    \ NOT NULL,\nEND_TIME BIGINT(19) NULL,\nCALENDAR_NAME VARCHAR(200) NULL,\nMISFIRE_INSTR\
    \ SMALLINT(2) NULL,\nJOB_DATA BLOB NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\n\
    FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)\nREFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_SIMPLE_TRIGGERS (\nSCHED_NAME VARCHAR(120)\
    \ NOT NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT\
    \ NULL,\nREPEAT_COUNT BIGINT(7) NOT NULL,\nREPEAT_INTERVAL BIGINT(12) NOT NULL,\n\
    TIMES_TRIGGERED BIGINT(10) NOT NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\n\
    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\nREFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_CRON_TRIGGERS (\nSCHED_NAME VARCHAR(120) NOT\
    \ NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT NULL,\n\
    CRON_EXPRESSION VARCHAR(120) NOT NULL,\nTIME_ZONE_ID VARCHAR(80),\nPRIMARY KEY\
    \ (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\nFOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\n\
    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\nENGINE=InnoDB;\n\
    \nCREATE TABLE QRTZ_SIMPROP_TRIGGERS\n  (          \n    SCHED_NAME VARCHAR(120)\
    \ NOT NULL,\n    TRIGGER_NAME VARCHAR(200) NOT NULL,\n    TRIGGER_GROUP VARCHAR(200)\
    \ NOT NULL,\n    STR_PROP_1 VARCHAR(512) NULL,\n    STR_PROP_2 VARCHAR(512) NULL,\n\
    \    STR_PROP_3 VARCHAR(512) NULL,\n    INT_PROP_1 INT NULL,\n    INT_PROP_2 INT\
    \ NULL,\n    LONG_PROP_1 BIGINT NULL,\n    LONG_PROP_2 BIGINT NULL,\n    DEC_PROP_1\
    \ NUMERIC(13,4) NULL,\n    DEC_PROP_2 NUMERIC(13,4) NULL,\n    BOOL_PROP_1 BOOLEAN\
    \ NULL,\n    BOOL_PROP_2 BOOLEAN NULL,\n    TIME_ZONE_ID VARCHAR(80) NULL,\n \
    \   PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\n    FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\
    \ \n    REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\nENGINE=InnoDB;\n\
    \nCREATE TABLE QRTZ_BLOB_TRIGGERS (\nSCHED_NAME VARCHAR(120) NOT NULL,\nTRIGGER_NAME\
    \ VARCHAR(200) NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT NULL,\nBLOB_DATA BLOB\
    \ NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),\nINDEX (SCHED_NAME,TRIGGER_NAME,\
    \ TRIGGER_GROUP),\nFOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)\nREFERENCES\
    \ QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))\nENGINE=InnoDB;\n\nCREATE\
    \ TABLE QRTZ_CALENDARS (\nSCHED_NAME VARCHAR(120) NOT NULL,\nCALENDAR_NAME VARCHAR(200)\
    \ NOT NULL,\nCALENDAR BLOB NOT NULL,\nPRIMARY KEY (SCHED_NAME,CALENDAR_NAME))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (\nSCHED_NAME VARCHAR(120)\
    \ NOT NULL,\nTRIGGER_GROUP VARCHAR(200) NOT NULL,\nPRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))\n\
    ENGINE=InnoDB;\n\nCREATE TABLE QRTZ_FIRED_TRIGGERS (\nSCHED_NAME VARCHAR(120)\
    \ NOT NULL,\nENTRY_ID VARCHAR(140) NOT NULL,\nTRIGGER_NAME VARCHAR(200) NOT NULL,\n\
    TRIGGER_GROUP VARCHAR(200) NOT NULL,\nINSTANCE_NAME VARCHAR(200) NOT NULL,\nFIRED_TIME\
    \ BIGINT(19) NOT NULL,\nSCHED_TIME BIGINT(19) NOT NULL,\nPRIORITY INTEGER NOT\
    \ NULL,\nSTATE VARCHAR(16) NOT NULL,\nJOB_NAME VARCHAR(200) NULL,\nJOB_GROUP VARCHAR(200)\
    \ NULL,\nIS_NONCONCURRENT BOOLEAN NULL,\nREQUESTS_RECOVERY BOOLEAN NULL,\nPRIMARY\
    \ KEY (SCHED_NAME,ENTRY_ID))\nENGINE=InnoDB;\n\nCREATE TABLE QRTZ_SCHEDULER_STATE\
    \ (\nSCHED_NAME VARCHAR(120) NOT NULL,\nINSTANCE_NAME VARCHAR(200) NOT NULL,\n\
    LAST_CHECKIN_TIME BIGINT(19) NOT NULL,\nCHECKIN_INTERVAL BIGINT(19) NOT NULL,\n\
    PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))\nENGINE=InnoDB;\n\nCREATE TABLE QRTZ_LOCKS\
    \ (\nSCHED_NAME VARCHAR(120) NOT NULL,\nLOCK_NAME VARCHAR(40) NOT NULL,\nPRIMARY\
    \ KEY (SCHED_NAME,LOCK_NAME))\nENGINE=InnoDB;\n\nCREATE INDEX IDX_QRTZ_J_REQ_RECOVERY\
    \ ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);\nCREATE INDEX IDX_QRTZ_J_GRP\
    \ ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);\n\nCREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);\n\
    CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);\nCREATE INDEX\
    \ IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);\nCREATE INDEX IDX_QRTZ_T_G\
    \ ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);\nCREATE INDEX IDX_QRTZ_T_STATE ON\
    \ QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);\nCREATE INDEX IDX_QRTZ_T_N_STATE ON\
    \ QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);\nCREATE\
    \ INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);\n\
    CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);\n\
    CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);\n\
    \nCREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);\n\
    CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);\n\
    CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);\n\
    CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);\nCREATE\
    \ INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);\n\
    CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);\n\
    \n\nCREATE TABLE `ACTIVEMQ_ACKS` (\n  `CONTAINER` varchar(250) NOT NULL,\n  `SUB_DEST`\
    \ varchar(250) DEFAULT NULL,\n  `CLIENT_ID` varchar(250) NOT NULL,\n  `SUB_NAME`\
    \ varchar(250) NOT NULL,\n  `SELECTOR` varchar(250) DEFAULT NULL,\n  `LAST_ACKED_ID`\
    \ bigint(20) DEFAULT NULL,\n  `PRIORITY` bigint(20) NOT NULL DEFAULT '5',\n  `XID`\
    \ varchar(250) DEFAULT NULL,\n  PRIMARY KEY (`CONTAINER`,`CLIENT_ID`,`SUB_NAME`,`PRIORITY`),\n\
    \  KEY `ACTIVEMQ_ACKS_XIDX` (`XID`)\n);\n\nCREATE TABLE `ACTIVEMQ_LOCK` (\n  `ID`\
    \ bigint(20) NOT NULL,\n  `TIME` bigint(20) DEFAULT NULL,\n  `BROKER_NAME` varchar(250)\
    \ DEFAULT NULL,\n  PRIMARY KEY (`ID`)\n);\n\nCREATE TABLE `ACTIVEMQ_MSGS` (\n\
    \  `ID` bigint(20) NOT NULL,\n  `CONTAINER` varchar(250) NOT NULL,\n  `MSGID_PROD`\
    \ varchar(250) DEFAULT NULL,\n  `MSGID_SEQ` bigint(20) DEFAULT NULL,\n  `EXPIRATION`\
    \ bigint(20) DEFAULT NULL,\n  `MSG` mediumblob,\n  `PRIORITY` bigint(20) DEFAULT\
    \ NULL,\n  `XID` varchar(250) DEFAULT NULL,\n  PRIMARY KEY (`ID`),\n  KEY `ACTIVEMQ_MSGS_MIDX`\
    \ (`MSGID_PROD`,`MSGID_SEQ`),\n  KEY `ACTIVEMQ_MSGS_CIDX` (`CONTAINER`),\n  KEY\
    \ `ACTIVEMQ_MSGS_EIDX` (`EXPIRATION`),\n  KEY `ACTIVEMQ_MSGS_PIDX` (`PRIORITY`),\n\
    \  KEY `ACTIVEMQ_MSGS_XIDX` (`XID`)\n);\n\n\ncommit; \n"
kind: ConfigMap
metadata:
  name: deployment-scripts
  namespace: openunison-deploy
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: artifact-deployment
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  namespace: openunison-deploy
  name: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: artifact-deployment
  namespace: openunison-deploy
spec:
  template:
    spec:
      containers:
      - name: artifact-deployment
        image: docker.io/tremolosecurity/kubernetes-artifact-deployment:latest
        command: ["java", "-jar", "/usr/local/artifactdeploy/artifact-deploy.jar",  "-extraCertsPath","/etc/extracerts","-installScriptURL", "file:///etc/input-maps/deploy.js","-kubernetesURL","https://kubernetes.default.svc.cluster.local","-rootCaPath","/var/run/secrets/kubernetes.io/serviceaccount/ca.crt","-secretsPath","/etc/secrets/input.props","-tokenPath","/var/run/secrets/kubernetes.io/serviceaccount/token","-deploymentTemplate","file:///etc/input-maps/openunison.yaml"]
        volumeMounts:
          - name: secrets-dir
            mountPath: "/etc/secrets"
            readOnly: true
          - name: extra-certs-dir
            mountPath: "/etc/extracerts"
            readOnly: true
          - name: input-maps
            mountPath: "/etc/input-maps"
            readOnly: true 
      restartPolicy: Never
      volumes:
        - name : secrets-dir
          secret:
            secretName: input
        - name : extra-certs-dir
          configMap:
            name: extracerts
        - name: input-maps
          configMap:
            name: deployment-scripts
  backoffLimit: 1